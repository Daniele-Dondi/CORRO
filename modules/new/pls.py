from sklearn.cross_decomposition import PLSRegression
import numpy as np
import matplotlib.pyplot as plt


# Paste your data as a multiline string
raw_data = """
0.570291777	0.157142857	0.30952381	0.059171598	41.26452613
0.570291777	0.141527002	0.085539715	0.05952381	62.78571552
0.570291777	0.173553719	1	0.113207547	53.33497035
0.643070788	0.149333333	1	0.052941176	17.55880282
0.83643617	0.160390516	0.085539715	0.052941176	5.529906697
1	0.173553719	0.085539715	0.128342246	42.81292825
0.83643617	0.374670185	0.30952381	0.052941176	13.27473408
0.643070788	0.453074434	1	0.067073171	0
0.643070788	0.152284264	0.085539715	0.27826087	4.444109893
0.570291777	0.311440678	0.30952381	0.05952381	24.05265274
1	0.374670185	0.085539715	0.401960784	78.36249844
0.570291777	0.151260504	1	0.079365079	14.49254361
0.570291777	0.150943396	0.30952381	0.052941176	11.75749506
1	0.453074434	0.30952381	0.113207547	41.48980841
1	0.141527002	1	0.067073171	1.442502721
0.643070788	0.151260504	0.085539715	0.079365079	9.910073167
1	0.141527002	0.30952381	0.401960784	68.67316565
0.83643617	0.142857143	1	0.285714286	2.481415648
0.570291777	0.150943396	1	0.401960784	74.51133845
0.83643617	0.159574468	0.30952381	1	48.23965662
0.643070788	0.152284264	0.085539715	1	12.05269157
0.83643617	0.142857143	1	0.079365079	4.820162197
0.643070788	0.167346939	1	0.067073171	5.688672061
0.83643617	1	0.085539715	0.05952381	13.24692026
0.570291777	0.149333333	0.30952381	0.052941176	3.046255894
0.643070788	0.167346939	0.30952381	0.281818182	53.91867484
1	0.152173913	1	0.401960784	45.53588257
0.643070788	0.149333333	1	0.079365079	7.387205125
0.643070788	0.175	0.085539715	0.07106599	27.00233561
0.570291777	1	0.085539715	0.285714286	68.47251074
1	0.435897436	0.085539715	0.052941176	50.90618574
0.570291777	1	1	0.285714286	28.30443344
0.570291777	0.160390516	1	0.128342246	40.24019595
0.83643617	0.167346939	0.30952381	0.27826087	22.49487977
1	0.152173913	0.30952381	0.052941176	6.77799041
1	0.152173913	1	0.27826087	14.03184959
0.83643617	0.158008658	0.085539715	0.079365079	25.79234273
1	0.152284264	1	1	51.15306518
0.570291777	0.149333333	0.30952381	0.269565217	6.703331473
0.570291777	0.141527002	0.30952381	0.052941176	23.50114845
0.643070788	0.142857143	0.085539715	0.07106599	28.35051675
0.643070788	0.149105368	0.085539715	0.05952381	60.55316321
1	0.163316583	0.085539715	0.269565217	8.008432112
0.643070788	0.311440678	1	0.126582278	73.95398123
0.83643617	0.173553719	0.30952381	0.059171598	0.43718104
0.643070788	0.152284264	0.085539715	0.113207547	6.286120839
0.643070788	0.175	0.085539715	0.126582278	64.23525691
1	0.435897436	1	1	95.38648822
0.643070788	0.374670185	0.085539715	0.05952381	64.56169067
"""  # Replace ... with the rest of your data

# Convert to NumPy array
data = np.array([list(map(float, line.split())) for line in raw_data.strip().split('\n')])

# Split into X and Y
X = data[:, :4]  # First 4 columns
Y = data[:, 4]   # Last column

pls = PLSRegression(n_components=2)
X_pls = pls.fit_transform(X, Y)[0]

# Get the weights (composition of components)
print("PLS Component 1 weights:", pls.x_weights_[:, 0])
print("PLS Component 2 weights:", pls.x_weights_[:, 1])

plt.scatter(X_pls[:, 0], X_pls[:, 1], c=Y, cmap='plasma')
plt.colorbar(label='Y value')
plt.xlabel('Comp. 1 ['+", ".join([f"{w:.3f}" for w in pls.x_weights_[:, 0]])+"]")
plt.ylabel('Comp. 2 ['+", ".join([f"{w:.3f}" for w in pls.x_weights_[:, 1]])+"]")   
#plt.ylabel('Comp. 2 '+str(pls.x_weights_[:, 1]))
plt.title('PLS Projection Colored by Y')
plt.show()
