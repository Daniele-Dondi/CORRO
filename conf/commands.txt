log 
#1
#print string to log file
#variables contained in text will be replaced automatically
#use: log text
#
#Example 1:
#log sample taken
#it writes 'sample taken' into the log queue
#
#Example 2:
#eval $x$,1
#log x=$x$
#it writes 'x=1' in the log queue

ask 
#6
#if ask, make question to user
#use: ask $varname$,title,question,initialvalue,minvalue,maxvalue
#The procedure creates a window with title title, 
#outputs the text contained in question, 
#sets the initial value to initialvalue and limits the input range from minvalue to maxvalue.
#
#Example:
#ask $ML$,Syringe 1,Enter how many ml to put,10,10,60
#macro "syr1_X_ml"$ML$

getsyringeparms 
#1
#load the values for the syringe  
#use: getsyringeparms syringenumber
#
#Parameters taken are syringe 0 to max sign distance (mm), syringe total volume (ml), 
#volume of inlet tube and volume of outlet tube as loaded in Configurator. 
#
#The command creates and #assigns the following variables:
#Variable Name     Meaning
#$numsyringes$     Total number of syringes installed on Syringebot
#$syringemax$      Distance in mm from 0 to max signs for syringe syringenumber
#$syringevol$      Max volume in ml for syringe syringenumber
#$volinlet$        Volume in ml of the inlet tube
#$voloutlet$       Volume in ml of the outlet tube
#$axisname$        Axis named related to syringe syringenumber
#
#After this command it is safe to proceed with the calculations for the syringe movements.

getvalveexit
#3
#Retrieve the valve exit number for the syringe indicated
#use: getvalveexit $var$,syr_num,exit_name
#
#Where syr_num=numer of syringe, exit_name=name of the connection
#returns the number of the valve exit. -1 if exit_name is not found
#exit_name is case sensitive
#
#Example:
#getvalveexit $var$,0,Air/Waste

eval 
#2
#calculate somethg
#use: eval $varname$,math_expression
#
#Example:
#ask $a$,a value,Enter the value of a,1,1,10
#ask $b$,b value,Enter the value of b,1,1,10
#eval $sum$,$a$+$b$
#echo the sum of a and b is $sum$

getvalue 
#2
#retrieve a sensor variable
#use: getvalue $varname$,sensor_value
#
#Example:
#getvalue $v$,V2
#message $v$
#
#Get the value of variable V2 and show it in the messagebox


let 
#2
#variable assignment
#use: let $varname$,value or variable

createarray 
#2
#create an array of vars called base_varname1, 2, ...
#use: createarray base_varname,number_of_elements_in_array
#
#Example:
#createarray V,10; creates an array of 10 elements
#;elements of the array could also be accessed individually as $V1$, $V2$ etc.
#;or programatically with function get/setelements
#setelement V,5,84
#getelement V,$var$,5
#message the value of the 5th element of the array V is $var$

getelement 
#3
#retrieve an element from array
#use: getelement base_varname,store_var,number_of_element
#
#Example:
#createarray V,10; creates an array of 10 elements
#;elements of the array could also be accessed individually as $V1$, $V2$ etc.
#;or programatically with function get/setelements
#setelement V,5,84
#getelement V,$var$,5
#message the value of the 5th element of the array V is $var$

setelement 
#3
#set an element of an array
#use: setelement base_varname,number_of_element,value
#
#Example:
#createarray V,10; creates an array of 10 elements
#;elements of the array could also be accessed individually as $V1$, $V2$ etc.
#;or programatically with function get/setelements
#setelement V,5,84
#getelement V,$var$,5
#message the value of the 5th element of the array V is $var$

exec 
#2
#execute some Python code
#use: exec code!,varname1=$var1$,...
#Code might contain variables ($..$), that allow exchange with the script
#Code on multiple lines must be separated with /n

macro 
#10
#call a macro
#use: macro "macroname" var1,var2..
#PLEASE NOTE THAT IN THIS FUNCTION BLOCK, AVAILABLE MACROS ARE LISTED ALREADY
#
#All the macro files are saved in the directory macros with the extensions .txt and they can be edited with a plain text editor. 
#Macro macroname can contain spaces.
#It is possible to pass parameters to a macro by indicating their values: var1,var2...
#
#Example:
#macro "syr1_X_ml"20
#If parameters are passed (var1,var2...) variables $1$, $2$, etc. will be automatically created and assigned.
#In the example above, the macro syr1_X_ml is called and the value 20 is inserted in the variable $1$ of the macro

echo 
#1
#echo to the CLI console
#use: echo text $varname$
#
#Example:
#ask $X$,Vial X position,Enter vial X position,1,1,8
#ask $Y$,Vial Y position,Enter vial Y position,1,1,6
#eval $X$,58-($X$-1)*15.71328
#eval $Y$,121+($Y$-1)*14.8
#echo X=$X$ Y=$Y$

hook 
#2
#create an hook (temperature or timer)
#use: hook temp or time $value$ "macroname"
#or
#use: hook temp or time $value$
#
#time is defined use the format xxhxxmxxs
#
#In the first case a macro is called, 
#in the second case the execution is paused up to the event is completed.
#
#Please note that when CORRO is waiting for events,
#Temperature or Time buttons will appear on the main window.
#By clicking them is possible to cancel the event
#
#Example 1:
#eval $pause$,1
#hook time $pause$s "titration ASK2"
#;it will wait 1 second and then call macro
#
#Example 2:
#hook temp >100 "temp_reached"
#;it will call the macro when temperature is greater than 100 °C
#
#Example 3:
#hook time 1m10s
#;it will pause the execution of the script for 1 minute and 10 seconds

writegcode 
#1
#write the gcode recorded to a file
#use: writegcode filename

readgcode 
#1
#read the gcode from a file
#use: readgcode filename

message 
#1
#show a messagebox
#use: message text $varname$
#
#Example:
#eval $a$,1
#message The value of a is $a$

setglobal 
#4
#upload a variable in the global variable list
#use: setglobal $varname$ [$varname2$] ...
#
#Example:
#eval $a$,1 ; load variables a and b
#eval $b$,2
#message $a$ $b$ ;show values
#setglobal $a$ $b$ ;save globally
#eval $a$,5 ;change values of a and b
#eval $b$,6
#message $a$ $b$ ;show the new values
#getglobal $a$ $b$ ;retrieve the saved one globally
#message $a$ $b$ ;show the global values

getglobal 
#4
#retrieve a variable from the global variable list   
#use: getglobal $varname$ [$varname2$] ...
#
#Example:
#eval $a$,1 ; load variables a and b
#eval $b$,2
#message $a$ $b$ ;show values
#setglobal $a$ $b$ ;save globally
#eval $a$,5 ;change values of a and b
#eval $b$,6
#message $a$ $b$ ;show the new values
#getglobal $a$ $b$ ;retrieve the saved one globally
#message $a$ $b$ ;show the global values

send
#2
#send commands to SyringeBOT
#use: send command,where
#
#where is the number of syringebot
#numbering starts from 0
#
#Example:
#send G28 X Y,0

buffer
#0
#Instead of sending commands directly to syringebot, it
#records all following commands sent to SyringeBOT. Use print or play to send recorded command.
#
#Example:
#buffer
#macro "syr1_X_ml"30
#macro "syr1_X_ml"60
#macro "syr1_X_ml"60
#macro "purge syringe 1"
#print

record
#0
#Instead of sending commands directly to syringebot, it
#records all following commands sent to SyringeBOT. Use print or play to send recorded command.
#
#Example:
#record
#macro "syr1_X_ml"30
#macro "syr1_X_ml"60
#macro "syr1_X_ml"60
#macro "purge syringe 1"
#play

print
#0
#send to SyringeBOT commands previously recorded by record or buffer
#
#Example:
#buffer
#macro "syr1_X_ml"30
#macro "syr1_X_ml"60
#macro "syr1_X_ml"60
#macro "purge syringe 1"
#print

play
#0
#send to SyringeBOT the commands recorded by record or buffer
#
#Example:
#record
#macro "syr1_X_ml"30
#macro "syr1_X_ml"60
#macro "syr1_X_ml"60
#macro "purge syringe 1"
#play

plugon
#1
#plugon switch on a wifi-connected smart plug
#Use: plugon plugname
#
#Example:
#plugon plug1

plugoff
#1
#plugoff switch off a wifi-connected smart plug
#Use: plugoff plugname
#
#Example:
#plugoff plug1

for
#2
#For executes cycles over a variable for the number of cycles indicated. For must be always followed by next. 
#Use: for $varname$ number_of_cycles_to_perform
#A fixed value for cycles to perform could be substituted with a variable
#Use: for $varname$ $num_cycles$
#The for starts from the value indicated and goes DOWNWARD to 1.
#
#Example 1:
#for $a$ 10
#message cycle number $a$
#next
#
#Example 2:
#ask $cycles$,for,Enter how many cycles to perform,2,2,20
#for $a$ $cycles$
#message cycle number $a$ of $cycles$
#next

next
#0
#The next statement must be always connected to a for. It is possible to nest cycles.
#
#Example:
#for $x$ 2
#for $y$ 3
#message This message will be showed 6 times
#next
#next

label
#1
#Label creates a label used as an entry point for jump and if statements. The label name must not contain spaces.
#Use: label labelname_without_spaces
#
#Example:
#label cycle1

jump
#1
#Jump is an unconditioned jump to a label. 
#Use: jump labelname
#
#Example:
#label labelname
#;the code here is executed forever, but the watchdog will ask to continue or to stop after some seconds
#jump labelname

if
#6
#There are three different uses of if.
#1) if $varname$ label
#2) if $varname$ macro "macroname" var1,var2...
#3) if $varname$
#3) else
#3) endif
#
#How it works:
#
#1) It jumps to the label if $varname$ is true. 
#2) It executes the macro “macroname” if $varname$ is true 
#3) The third method is called IF BLOCK. Each IF should end with the corresponding ENDIF. The ELSE statement is optional.
#
#Consider using an eval command before the if statement to compute the value of the variable being used.
#
#Example 1:
#label loop
#ask $a$,IF,Insert 1 to loop,0,0,1
#eval $a$,$a$==1
#if $a$ loop
#
#Example 2:
#ask $a$,IF,Insert 1 to init,0,0,1
#eval $a$,$a$==1
#if $a$ macro “init”
#
#Example 3:
#ask $grade$,How good are you?,Enter how many marks you obtained,0,0,100
#eval $test$,$grade$>=90
#if $test$
#    message "Excellent work!"
#else
#    eval $test$,$grade$>=75
#    if $test$
#        message "Good job!"
#    else
#        eval $test$,$grade$>=60
#        if $test$
#            message "You passed."
#        else
#            message "Better luck next time."
#        endif
#    endif
#endif

else
#
#see if command, case n.3

endif
#
#see if command, case n.3

